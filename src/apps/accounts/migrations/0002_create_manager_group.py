# Generated by Django 5.2.5 on 2025-08-24 08:14

from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType
from django.db import migrations


def create_groups(apps, schema_editor):
    # Создаем группы
    managers_group, created = Group.objects.get_or_create(name="managers")

    vehicles = apps.get_model("vehicles", "Vehicle")
    content_type = ContentType.objects.get_for_model(vehicles)
    view_vehicle = Permission.objects.get(
        content_type=content_type,
    )
    change_vehicle = Permission.objects.get(
        content_type=content_type,
    )
    delete_vehicle = Permission.objects.get(
        content_type=content_type,
    )
    add_vehicle = Permission.objects.get(
        content_type=content_type,
    )

    brands = apps.get_model("vehicles", "Brand")
    content_type = ContentType.objects.get_for_model(brands)
    view_brand = Permission.objects.get(
        content_type=content_type,
    )

    drivers = apps.get_model("vehicles", "Driver")
    content_type = ContentType.objects.get_for_model(drivers)
    view_driver = Permission.objects.get(
        content_type=content_type,
    )
    change_driver = Permission.objects.get(
        content_type=content_type,
    )
    delete_driver = Permission.objects.get(
        content_type=content_type,
    )
    add_driver = Permission.objects.get(
        content_type=content_type,
    )

    vehicledrivers = apps.get_model("vehicles", "VehicleDriver")
    content_type = ContentType.objects.get_for_model(vehicledrivers)
    view_vehicledriver = Permission.objects.get(
        content_type=content_type,
    )
    change_vehicledriver = Permission.objects.get(
        content_type=content_type,
    )
    delete_vehicledriver = Permission.objects.get(
        content_type=content_type,
    )
    add_vehicledriver = Permission.objects.get(
        content_type=content_type,
    )

    enterprises = apps.get_model("enterprises", "Enterprise")
    content_type = ContentType.objects.get_for_model(enterprises)
    view_enterprise = Permission.objects.get(
        content_type=content_type,
    )
    add_enterprise = Permission.objects.get(
        content_type=content_type,
    )

    vehiclegpspoint = apps.get_model("tracking", "VehicleGPSPoint")
    content_type = ContentType.objects.get_for_model(vehiclegpspoint)
    view_vehiclegpspoint = Permission.objects.get(
        content_type=content_type,
    )
    delete_vehiclegpspoint = Permission.objects.get(
        content_type=content_type,
    )

    trips = apps.get_model("tracking", "Trip")
    content_type = ContentType.objects.get_for_model(trips)
    view_trip = Permission.objects.get(
        content_type=content_type,
    )
    change_trip = Permission.objects.get(
        content_type=content_type,
    )
    delete_trip = Permission.objects.get(
        content_type=content_type,
    )
    add_trip = Permission.objects.get(
        content_type=content_type,
    )

    # Назначаем разрешения группам
    managers_group.permissions.set(
        [
            view_vehicle,
            change_vehicle,
            delete_vehicle,
            view_brand,
            view_driver,
            change_driver,
            delete_driver,
            view_enterprise,
            view_vehicledriver,
            change_vehicledriver,
            delete_vehicledriver,
            view_vehiclegpspoint,
            delete_vehiclegpspoint,
            view_trip,
            change_trip,
            delete_trip,
            add_vehicledriver,
            add_driver,
            add_trip,
            add_vehicle,
            add_enterprise,
        ]
    )


class Migration(migrations.Migration):

    dependencies = [
        ("accounts", "0001_initial"),
        ("vehicles", "0002_create_deafult_brand"),
        ("tracking", "0001_initial"),
        ("enterprises", "0003_alter_enterprise_timezone"),
        ("contenttypes", "0002_remove_content_type_name"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.RunPython(create_groups),
    ]
