# Generated by Django 5.1.5 on 2025-02-05 13:04

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('vehicle_type', models.CharField(choices=[('sedan', 'Легковой'), ('truck', 'Грузовой'), ('bus', 'Автобус'), ('suv', 'Внедорожник')], max_length=50)),
                ('fuel_tank_capacity_liters', models.PositiveIntegerField(help_text='Объем бака л')),
                ('load_capacity_kg', models.PositiveIntegerField(help_text='Грузоподъемность кг')),
                ('seats_number', models.PositiveIntegerField(help_text='Количество мест')),
            ],
        ),
        migrations.CreateModel(
            name='Enterprise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, verbose_name='название предприятия')),
                ('city', models.CharField(max_length=250, verbose_name='город')),
                ('phone', models.CharField(max_length=20, verbose_name='телефон')),
                ('email', models.EmailField(max_length=254, verbose_name='email')),
                ('website', models.URLField(blank=True, verbose_name='веб-сайт')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='custom_user_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, verbose_name='имя')),
                ('salary', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='зарплата')),
                ('experience_years', models.PositiveIntegerField(verbose_name='стаж работы (лет)')),
                ('enterprise', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='drivers', to='vehicle_accounting.enterprise', verbose_name='предприятие')),
            ],
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enterprises', models.ManyToManyField(related_name='managers', to='vehicle_accounting.enterprise', verbose_name='предприятия')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='manager', to=settings.AUTH_USER_MODEL, verbose_name='пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='цена')),
                ('year_of_manufacture', models.PositiveIntegerField(verbose_name='год выпуска')),
                ('mileage', models.PositiveIntegerField(verbose_name='пробег')),
                ('description', models.TextField(blank=True, verbose_name='описание')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='дата внесения в базу')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='дата обновления в базе')),
                ('car_number', models.CharField(max_length=6, unique=True, verbose_name='номер машины')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vehicle_accounting.brand', verbose_name='бренд')),
                ('enterprise', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='vehicles', to='vehicle_accounting.enterprise', verbose_name='предприятие')),
            ],
        ),
        migrations.CreateModel(
            name='VehicleDriver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активный водитель')),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='driver_vehicles', to='vehicle_accounting.driver')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicle_drivers', to='vehicle_accounting.vehicle')),
            ],
        ),
        migrations.AddField(
            model_name='vehicle',
            name='drivers',
            field=models.ManyToManyField(related_name='vehicles', through='vehicle_accounting.VehicleDriver', to='vehicle_accounting.driver', verbose_name='водители'),
        ),
        migrations.AddConstraint(
            model_name='vehicledriver',
            constraint=models.UniqueConstraint(fields=('vehicle', 'driver'), name='unique_vehicle_driver'),
        ),
        migrations.AddConstraint(
            model_name='vehicledriver',
            constraint=models.UniqueConstraint(condition=models.Q(('is_active', True)), fields=('driver', 'is_active'), name='unique_active_driver', violation_error_message='Данный водитель уже назначен активным для одного из автомобилей.'),
        ),
        migrations.AddConstraint(
            model_name='vehicledriver',
            constraint=models.UniqueConstraint(condition=models.Q(('is_active', True)), fields=('vehicle', 'is_active'), name='unique_active_vehicle', violation_error_message='Не может быть назначено больше одного водителя.'),
        ),
    ]
