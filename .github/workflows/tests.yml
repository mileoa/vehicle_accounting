name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:16-3.5
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: vehicle_accounting_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          binutils libproj-dev gdal-bin libgdal-dev \
          sqlite3 libsqlite3-mod-spatialite \
          gcc gettext

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        echo "IS_DEBUG=True" >> $GITHUB_ENV
        echo "DJANGO_SECRET_KEY=django-insecure-test-key-for-ci" >> $GITHUB_ENV
        echo "GRAPHHOPPER_API_KEY=" >> $GITHUB_ENV
        echo "GEOPIFY_API_KEY=" >> $GITHUB_ENV
        echo "DJANGO_SUPERUSER_PASSWORD=admin" >> $GITHUB_ENV
        echo "DJANGO_SUPERUSER_USERNAME=admin" >> $GITHUB_ENV
        echo "DJANGO_SUPERUSER_EMAIL=admin@admin.admin" >> $GITHUB_ENV

    - name: Run migrations
      run: |
        python manage.py migrate --settings=vehicle_accounting.test_settings

    - name: Collect static files
      run: |
        python manage.py collectstatic --noinput

    - name: Run integration tests
      run: |
        pytest --ds=vehicle_accounting.test_settings tests/

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Cypress
      run: |
        npm install 

    - name: Run migrations
      run: |
        python manage.py migrate --settings=vehicle_accounting.test_settings

    - name: Start Django server
      run: |
        python manage.py runserver --settings=vehicle_accounting.test_settings &
        sleep 10  # Ждем запуска сервера

    - name: Create superuser
      run: |
        python manage.py createsuperuser --settings=vehicle_accounting.test_settings --noinput

    - name: Create manager user
      run: |
        python manage.py shell --settings=vehicle_accounting.test_settings -c "
        from django.contrib.auth import get_user_model;
        from vehicle_accounting.models import Manager, Enterprise;
        User = get_user_model();
        if not User.objects.filter(username='Manager_Alex').exists():
            user = User.objects.create_superuser('Manager_Alex', 'Manager_Alex@test.com', 'qwer1234qwer');
            manager = Manager.objects.create(user=user);
            enterprise = Enterprise.objects.first();
            if enterprise:
                manager.enterprises.add(enterprise)
        "

    - name: Run e2e tests
      run: |
        npx cypress run
      env:
        CYPRESS_BASE_URL: http://localhost:8000
  